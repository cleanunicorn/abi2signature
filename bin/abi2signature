#!/usr/bin/env node

var Web3 = require('web3')
var web3 = new Web3()
var fs = require("fs")

// Display help
for (let i = 0; i < process.argv.length; i++) {
    if (process.argv[i] == '--help' || process.argv[i] == '-h') {
        console.log("Run this like");
        console.log("nodejs main.js [command] {path-to-abi.json|function}");
        console.log("");
        console.log("Command can be");
        console.log("   func2sig    - takes the function and computes the signature");
        console.log("   string2sig  - takes a string and computes the signatures");
        console.log("");
        console.log("Example: abi2signature < cryptokitties-abi.json");
        console.log('Example: abi2signature func2sig "approve(address,uint256)"');
        console.log('Example: abi2signature string2sig "[{...your abi...}]"');
        process.exit();
    }
}

async function main() {
    let contractABI
    switch (process.argv[2]) {
        case "func2sig":
            let func = process.argv[3]

            console.log(func, "->", web3.eth.abi.encodeFunctionSignature(func))
            break
        case "string2sig":
            contractABI = JSON.parse(process.argv[3])

            for (i = 0; i < contractABI.length; i++) {
                abiFunction = contractABI[i]

                if (abiFunction.name == undefined) {
                    continue
                }

                signature = web3.eth.abi.encodeFunctionSignature(abiFunction)
                console.log(signature, "->", "[", abiFunction.type, "]", abiFunction.name)
            }
            break
        default:
            contractABI = JSON.parse(await readStdin());

            for (i = 0; i < contractABI.length; i++) {
                abiFunction = contractABI[i]

                if (abiFunction.name == undefined) {
                    continue
                }

                signature = web3.eth.abi.encodeFunctionSignature(abiFunction)
                console.log(signature, "->", "[", abiFunction.type, "]", abiFunction.name)
            }
    }
}

async function readStdin() {
    process.stdin.setEncoding('utf8');

    let abi = '';

    process.stdin.on('readable', () => {
        const chunk = process.stdin.read();

        if (chunk != null) {
            abi = abi + chunk;
        }
    });

    return new Promise((resolve, reject) => {
        process.stdin.on('end', () => {
            resolve(abi);
        });
    });
}

main()